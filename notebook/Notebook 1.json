{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "seyonsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5251e373-0bb0-4a88-91c3-5c89d3ac317e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cb9e64da-4efd-46fb-8c32-57da7c2d36d8/resourceGroups/seyonsynapserg/providers/Microsoft.Synapse/workspaces/seyonsynapsews/bigDataPools/seyonsparkpool",
				"name": "seyonsparkpool",
				"type": "Spark",
				"endpoint": "https://seyonsynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/seyonsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark \r\n",
					"import java.sql.DriverManager \r\n",
					"/** this JDBC url could be copied from Azure portal > Azure SQL database > Connection strings > JDBC **/ \r\n",
					"val url = s\"jdbc:sqlserver://seyonsqlsvr.database.windows.net:1433;database=seyonsqldb;user=sqladmin;password=Seyon2155$;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\" \r\n",
					"try { \r\n",
					"    val connection = DriverManager.getConnection(url) \r\n",
					"    val result = connection.createStatement().executeQuery(\"select t.SCHEMA_VERSION from VERSION t\") \r\n",
					"    result.next(); \r\n",
					"    println(s\"Successful to test connection. Hive Metastore version is ${result.getString(1)}\") \r\n",
					"} catch { \r\n",
					"    case ex: Throwable => println(s\"Failed to establish connection:\\n $ex\") \r\n",
					"}"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"jdbc:sqlserver://seyonsqlsvr.database.windows.net:1433;database=seyonsqldb;user=sqladmin@seyonsqlsvr;password=Seyon2155$;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark \r\n",
					"import java.sql.DriverManager \r\n",
					"/** this JDBC url could be copied from Azure portal > Azure SQL database > Connection strings > JDBC **/ \r\n",
					"val url = s\"jdbc:sqlserver://seyonsqlsvr.database.windows.net:1433;database=seyonsqldb;user=sqladmin@seyonsqlsvr;password=abcd1234#;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\" \r\n",
					"try { \r\n",
					"    val connection = DriverManager.getConnection(url) \r\n",
					"    val result = connection.createStatement().executeQuery(\"select t.SCHEMA_VERSION from VERSION t\") \r\n",
					"    result.next(); \r\n",
					"    println(s\"Successful to test connection. Hive Metastore version is ${result.getString(1)}\") \r\n",
					"} catch { \r\n",
					"    case ex: Throwable => println(s\"Failed to establish connection:\\n $ex\") \r\n",
					"}"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"show databases\").show()"
				],
				"execution_count": 7
			}
		]
	}
}