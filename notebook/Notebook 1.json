{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mysparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "00c12b20-0849-4bad-b455-d8f8c7903a4e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cb9e64da-4efd-46fb-8c32-57da7c2d36d8/resourceGroups/seyonsynapserg/providers/Microsoft.Synapse/workspaces/seyonsynapsews/bigDataPools/mysparkpool",
				"name": "mysparkpool",
				"type": "Spark",
				"endpoint": "https://seyonsynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mysparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"CREATE TABLE lakedatabase.myparquettable(id int, name string, birthdate date) USING Parquet"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"using Microsoft.Spark.Sql.Types;\r\n",
					"\r\n",
					"var data = new List<GenericRow>();\r\n",
					"\r\n",
					"data.Add(new GenericRow(new object[] { 3, \"Seyon\", new Date(2013, 7, 25)}));\r\n",
					"data.Add(new GenericRow(new object[] { 4, \"Deeran\", new Date(2020, 6, 25)}));\r\n",
					"\r\n",
					"var schema = new StructType\r\n",
					"    (new List<StructField>()\r\n",
					"        {\r\n",
					"            new StructField(\"id\", new IntegerType()),\r\n",
					"            new StructField(\"name\", new StringType()),\r\n",
					"            new StructField(\"birthdate\", new DateType())\r\n",
					"        }\r\n",
					"    );\r\n",
					"\r\n",
					"var df = spark.CreateDataFrame(data, schema);\r\n",
					"df.Write().Mode(SaveMode.Append).InsertInto(\"lakedatabase.myparquettable\");"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"USE lakedatabase;\r\n",
					"    SELECT * FROM sys.tables;"
				],
				"execution_count": 8
			}
		]
	}
}